{"version":3,"sources":["component/Home.js","component/Table_inside.js","component/Table_outside.js","component/Table_remote_inside.js","component/Table_remote_outside.js","App.js","reportWebVitals.js","index.js"],"names":["Home","sortTypes","up","class","fn","a","b","birth_data","down","default","sortTypesByName","name","localeCompare","sortTypesByHeight","height","sortTypesByMass","mass","pressed_button","undefined","Table_inside","state","currentSort","onSortChange","nextSort","setState","onClick_name","event","onClick_birth_year","onClick_height","onClick_mass","data","this","props","length","className","onClick","sort","map","p","React","Component","tableData","filteredList","Table_outside","reload","refreshPage","onChange","e","filterList","bind","filter","toLowerCase","includes","target","value","filteredName","push","console","log","placeholder","last_name","first_name","id","email","Table_remote_inside","filteredList2","Table_remote_outside","getDataApp","i","fetch","api_call","json","then","r","routes","path","exact","main","App","birth_year","style","display","padding","width","background","listStyleType","to","flex","route","index","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adea70df.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nexport default function Home () {\n    return (\n<div>\n<h2>Greeting</h2>\n</div>\n    )\n;}\n","import React from \"react\";\n\nconst sortTypes = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.birth_data - b.birth_data\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.birth_data - a.birth_data\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.birth_data - b.birth_data\n    }\n}\n\nconst sortTypesByName = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.name.localeCompare(b.name)\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.name.localeCompare(a.name)\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.name.localeCompare(b.name)\n    }\n}\nconst sortTypesByHeight = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.height - b.height\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.height - a.height\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.height - b.height\n    }\n}\nconst sortTypesByMass = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.mass - b.mass\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.mass - a.mass\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.mass - b.mass\n    }\n}\nlet pressed_button = undefined;\n\nclass Table_inside extends React.Component {\n\n    state = {\n        currentSort: 'default'\n    }\n\n    onSortChange = () => {\n        const { currentSort } = this.state;\n        let nextSort;\n\n        if(currentSort === 'down') nextSort = 'up';\n        else if(currentSort === 'up') nextSort = 'default';\n        else if(currentSort === 'default') nextSort = 'down';\n\n        this.setState({\n            currentSort: nextSort\n        })\n    };\n\n    onClick_name=(event)=>{\n        this.onSortChange(event)\n        pressed_button = \"name\";\n\n    };\n    onClick_birth_year=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"birth_data\";\n    };\n    onClick_height=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"height\";\n    };\n    onClick_mass=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"mass\";\n    };\n    render() {\n        const { data } = this.props;\n        const { currentSort } = this.state;\n        return (\n            data.length > 0 && (\n            <table className=\"table\">\n\n                <thead>\n                <tr>\n                    <th>Name\n                        <button onClick={this.onClick_name}>\n                            {`${sortTypesByName[currentSort].class}`}\n                        </button></th>\n                    <th>\n                        Birth year\n                        <button onClick={this.onClick_birth_year}>\n                            {`${sortTypes[currentSort].class}`}\n                        </button>\n                    </th>\n                    <th>\n                        Height\n                        <button onClick={this.onClick_height}>\n                            {`${sortTypes[currentSort].class}`}\n                        </button>\n                    </th>\n                    <th>\n                        Mass\n                        <button onClick={this.onClick_mass}>\n                            {`${sortTypes[currentSort].class}`}\n                        </button>\n                    </th>\n                </tr>\n                </thead>\n\n                { (pressed_button === \"name\")? (\n                <tbody>\n                {[...data].sort(sortTypesByName[currentSort].fn).map(p => (\n                    <tr>\n                        <td>{p.name}</td>\n                        <td>{p.birth_data}</td>\n                        <td>{p.height}</td>\n                        <td>{p.mass}</td>\n                    </tr>\n                ))}\n                </tbody>\n                ) : (\n                    (pressed_button === \"birth_data\")?\n                        ( <tbody>\n                    {[...data].sort(sortTypes[currentSort].fn).map(p => (\n                        <tr>\n                            <td>{p.name}</td>\n                            <td>{p.birth_data}</td>\n                            <td>{p.height}</td>\n                            <td>{p.mass}</td>\n                        </tr>\n                    ))}\n                    </tbody>):(\n                            (pressed_button === \"height\")?\n                                (\n\n                        <tbody>\n                        {[...data].sort(sortTypesByHeight[currentSort].fn).map(p => (\n                            <tr>\n                                <td>{p.name}</td>\n                                <td>{p.birth_data}</td>\n                                <td>{p.height}</td>\n                                <td>{p.mass}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                        ): (\n                                    (pressed_button === \"mass\")?\n                                        (\n                                    <tbody>\n                                    {[...data].sort(sortTypesByMass[currentSort].fn).map(p => (\n                                        <tr>\n                                            <td>{p.name}</td>\n                                            <td>{p.birth_data}</td>\n                                            <td>{p.height}</td>\n                                            <td>{p.mass}</td>\n                                        </tr>\n                                    ))}\n                                    </tbody>) :(\n                                            <tbody>\n                                            {[...data].sort(sortTypes[currentSort].fn).map(p => (\n                                                <tr>\n                                                    <td>{p.name}</td>\n                                                    <td>{p.birth_data}</td>\n                                                    <td>{p.height}</td>\n                                                    <td>{p.mass}</td>\n                                                </tr>\n                                            ))}\n                                            </tbody>\n                                        )\n\n                                )\n\n\n                        )\n                )\n\n\n                }\n\n\n\n            </table>\n        )\n\n\n        )\n    }\n}\n\nexport default Table_inside;","import React from \"react\";\nimport Table_inside from './Table_inside'\n\n\n\nlet tableData = [\n    {\n        name: 'Amancio Ortega',\n        birth_data: 1990,\n        height: 177,\n        mass: 65,\n    }, {\n        name: 'Bernard Arnault',\n        birth_data: 1991,\n        height: 178,\n        mass: 67,\n    }, {\n        name: 'Bill Gates',\n        birth_data: 1992,\n        height: 178,\n        mass: 68,\n    }, {\n        name: 'Carlos Sim Helu',\n        birth_data: 1993,\n        height: 188,\n        mass: 69,\n    }, {\n        name: 'Jeff Bezos',\n        birth_data: 1994,\n        height: 184,\n        mass: 70,\n    }, {\n        name: 'Larry Ellison',\n        birth_data: 1995,\n        height: 177,\n        mass: 71,\n    }, {\n        name: 'Larry Page',\n        birth_data: 1996,\n        height: 173,\n        mass: 72,\n    }, {\n        name: 'Mark Zuckerberg',\n        birth_data: 1997,\n        height: 171,\n        mass: 73,\n    }, {\n        name: 'Michael Bloomberg',\n        birth_data: 1998,\n        height: 170,\n        mass: 74,\n    }, {\n        name: 'Warren Buffet',\n        birth_data: 1999,\n        height: 190,\n        mass: 75,\n    }\n];\nlet filteredList=tableData;\n// noinspection JSAnnotator\n\n\nclass Table_outside extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.filterList = this.filterList.bind(this);\n    }\n    // фильтрация списка\n\n    filterList(e){\n\n        filteredList =[];\n\n          {tableData.filter(data => data.name.toLowerCase().includes(`${e.target.value.toLowerCase()}`)).map(filteredName => (\n\n              filteredList.push(filteredName)\n\n\n          ))}\n\n        console.log(filteredList)\n\n    }\n\n\n    state = {\n        name: undefined,\n        birth_data: undefined,\n        height: undefined,\n        mass: undefined,\n        reload: false\n    }\n    refreshPage = () => {\n        this.setState(\n            {reload: true},\n            () => this.setState({reload: false})\n        )\n    }\n    /*\n\n       getDataApp = async (e) => {\n         //   e.preventDefault();\n\n            for(let i=1; i<5; i++) {\n                const people_number = i;\n\n                const api_call = await fetch(`https://swapi.dev/api/people/${people_number}`);\n                const data = await api_call.json();\n                if (people_number) {\n                    this.setState({\n                        name: data.name,\n                        birth_year: data.birth_year,\n                        height: data.height,\n                        mass: data.mass\n                    });\n\n                    console.log(this.state);\n                    tableData.push(this.state);\n                }\n\n            }\n\n}\n\n\n     componentDidMount(){\n        this.getDataApp().then(r => {});\n\n\n     }\n*/\n    onChange=(e)=>{\n        this.filterList(e)\n        this.refreshPage(e)\n    }\n\n\n\n\n\n    render(){\n        return (\n    <div className=\"text-left\">\n        <input placeholder=\"Search\" onChange={this.onChange} />\n        <Table_inside data={filteredList} />\n\n    </div>\n        )  }\n};\n\nexport default Table_outside;","import React from \"react\";\n\nconst sortTypes = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.last_name.localeCompare(b.last_name)\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.last_name.localeCompare(a.last_name)\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.last_name.localeCompare(b.last_name)\n    }\n}\n\nconst sortTypesByName = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.first_name.localeCompare(b.first_name)\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.first_name.localeCompare(a.first_name)\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.first_name.localeCompare(b.first_name)\n    }\n}\nconst sortTypesByHeight = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.id - b.id\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.id - a.id\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.id - b.id\n    }\n}\nconst sortTypesByMass = {\n    up: {\n        class: '∨',\n        fn: (a, b) => a.email.localeCompare(b.email)\n    },\n    down: {\n        class: '∧',\n        fn: (a, b) => b.email.localeCompare(a.email)\n    },\n    default: {\n        class: '⬍',\n        fn: (a, b) => a.email.localeCompare(b.email)\n    }\n}\nlet pressed_button = undefined;\n\nclass Table_remote_inside extends React.Component {\n\n    state = {\n        currentSort: 'default'\n    }\n\n    onSortChange = () => {\n        const { currentSort } = this.state;\n        let nextSort;\n\n        if(currentSort === 'down') nextSort = 'up';\n        else if(currentSort === 'up') nextSort = 'default';\n        else if(currentSort === 'default') nextSort = 'down';\n\n        this.setState({\n            currentSort: nextSort\n        })\n    };\n\n    onClick_name=(event)=>{\n        this.onSortChange(event)\n        pressed_button = \"first_name\";\n\n    };\n    onClick_birth_year=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"last_name\";\n    };\n    onClick_height=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"id\";\n    };\n    onClick_mass=(event)=>{\n        this.onSortChange(event);\n        pressed_button = \"email\";\n    };\n    render() {\n        const { data } = this.props;\n        const { currentSort } = this.state;\n        return (\n            data.length > 0 && (\n                <table className=\"table\">\n\n                    <thead>\n                    <tr>\n                        <th>first_name\n                            <button onClick={this.onClick_name}>\n                                {`${sortTypesByName[currentSort].class}`}\n                            </button></th>\n                        <th>\n                            last_name\n                            <button onClick={this.onClick_birth_year}>\n                                {`${sortTypes[currentSort].class}`}\n                            </button>\n                        </th>\n                        <th>\n                            id\n                            <button onClick={this.onClick_height}>\n                                {`${sortTypes[currentSort].class}`}\n                            </button>\n                        </th>\n                        <th>\n                            email\n                            <button onClick={this.onClick_mass}>\n                                {`${sortTypes[currentSort].class}`}\n                            </button>\n                        </th>\n                    </tr>\n                    </thead>\n\n                    { (pressed_button === \"first_name\")? (\n                        <tbody>\n                        {[...data].sort(sortTypesByName[currentSort].fn).map(p => (\n                            <tr>\n                                <td>{p.first_name}</td>\n                                <td>{p.last_name}</td>\n                                <td>{p.id}</td>\n                                <td>{p.email}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    ) : (\n                        (pressed_button === \"last_name\")?\n                            ( <tbody>\n                            {[...data].sort(sortTypes[currentSort].fn).map(p => (\n                                <tr>\n                                    <td>{p.first_name}</td>\n                                    <td>{p.last_name}</td>\n                                    <td>{p.id}</td>\n                                    <td>{p.email}</td>\n                                </tr>\n                            ))}\n                            </tbody>):(\n                                (pressed_button === \"id\")?\n                                    (\n\n                                        <tbody>\n                                        {[...data].sort(sortTypesByHeight[currentSort].fn).map(p => (\n                                            <tr>\n                                                <td>{p.first_name}</td>\n                                                <td>{p.last_name}</td>\n                                                <td>{p.id}</td>\n                                                <td>{p.email}</td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    ): (\n                                        (pressed_button === \"email\")?\n                                            (\n                                                <tbody>\n                                                {[...data].sort(sortTypesByMass[currentSort].fn).map(p => (\n                                                    <tr>\n                                                        <td>{p.first_name}</td>\n                                                        <td>{p.last_name}</td>\n                                                        <td>{p.id}</td>\n                                                        <td>{p.email}</td>\n                                                    </tr>\n                                                ))}\n                                                </tbody>) :(\n                                                <tbody>\n                                                {[...data].sort(sortTypes[currentSort].fn).map(p => (\n                                                    <tr>\n                                                        <td>{p.first_name}</td>\n                                                        <td>{p.birth_data}</td>\n                                                        <td>{p.id}</td>\n                                                        <td>{p.email}</td>\n                                                    </tr>\n                                                ))}\n                                                </tbody>\n                                            )\n\n                                    )\n\n\n                            )\n                    )\n\n\n                    }\n\n\n\n                </table>\n            )\n\n\n        )\n    }\n}\n\nexport default Table_remote_inside;","import React from \"react\";\nimport Table_remote_inside from \"./Table_remote_inside\";\n\n\n\nlet filteredList=[];\nlet filteredList2 =[];\n\nclass Table_remote_outside extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.filterList = this.filterList.bind(this);\n    }\n\n    state = {\n        first_name: undefined,\n        last_name: undefined,\n        id: undefined,\n        email: undefined,\n        reload: false\n    }\n\n    getDataApp = async (e) => {\n        //   e.preventDefault();\n        filteredList =[];\n        for(let i=0; i<6; i++) {\n            const api_call = await fetch(`https://reqres.in/api/users?page=1`);\n            const data = await api_call.json();\n\n            this.setState({\n                first_name: data.data[i].first_name,\n                last_name: data.data[i].last_name,\n                id: data.data[i].id,\n                email: data.data[i].email\n\n            });\n            console.log(data)\n            console.log(this.state)\n            filteredList.push(this.state);\n        }\n\n\n\n    }\n\n    componentDidMount(){\n        this.getDataApp().then(r => {});\n\n\n    }\n\n\n    filterList(e){\n\n        filteredList2 = [];\n\n        {filteredList.filter(data => data.first_name.toLowerCase().includes(`${e.target.value.toLowerCase()}`)).map(filteredName => (\n\n            filteredList2.push(filteredName)\n\n\n        ))}\n\n    }\n\n\n    refreshPage = () => {\n        this.setState(\n            {reload: true},\n            () => this.setState({reload: false})\n        )\n    }\n\n    onChange=(e)=>{\n\n        this.filterList(e)\n        this.refreshPage(e)\n\n    }\n\n\n    render(){\n        return (\n            <div className=\"text-left\">\n                <input placeholder=\"Search\" onChange={this.onChange} />\n                <Table_remote_inside data={filteredList2} />\n\n            </div>\n        )  }\n};\n\nexport default Table_remote_outside;","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from \"./component/Home\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table_outside from \"./component/Table_outside\";\nimport Table_remote_outside from \"./component/Table_remote_outside\";\n\nconst routes = [\n    {\n        path: \"/\",\n        exact: true,\n        main: () => <Home />\n    },\n    {\n        path: \"/table_outside\",\n        main: () => <Table_outside />\n    },\n    {\n        path: \"/table1\",\n        main: () => <Table_remote_outside />\n    }\n];\n\nclass App extends React.Component {\n    state = {\n        name: undefined,\n        birth_year: undefined,\n        height: undefined,\n        mass: undefined\n    }\n\n    render(){\n    return (\n        <Router>\n            <div style={{ display: \"flex\" }}>\n                <div\n                    style={{\n                        padding: \"10px\",\n                        width: \"10%\",\n                        background: \"#f0f0f0\"\n                    }}\n                >\n                    <ul style={{ listStyleType: \"none\", padding: 0 }}>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/table_outside\" >Table_local</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/table1\" >Table_remote</Link>\n                        </li>\n\n                    </ul>\n                </div>\n\n                <div style={{ flex: 1, padding: \"10px\" }}>\n                    <Switch>\n                        {routes.map((route, index) => (\n                            <Route\n                                key={index}\n                                path={route.path}\n                                exact={route.exact}\n                                children={<route.main />}\n                            />\n                        ))}\n                    </Switch>\n                </div>\n            </div>\n\n        </Router>\n    );\n};\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}